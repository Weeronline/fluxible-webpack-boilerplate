{"version":3,"file":"bundle.js","sources":["webpack:///app/stores/route-store.js","webpack:///app/client.js","webpack:///app/app.js","webpack:///vertx (ignored)","webpack:///app/config/stores.js","webpack:///app/config/routes.js","webpack:///app/actions/load-home.js","webpack:///app/containers/home-container.js","webpack:///app/stores/application-store.js","webpack:///app/containers/Main.jsx","webpack:///app/components/Nav.js"],"sourcesContent":["import { RouteStore } from 'fluxible-router';\nimport routes from '../config/routes';\n\nexport default RouteStore.withStaticRoutes(routes);\n\n\n\n// WEBPACK FOOTER //\n// app/stores/route-store.js","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport app from './app';\n\nwindow.debug = require(\"debug\");\n\nconst debug = window.debug(\"boilerplate\");\n\nconst mountNode = document.getElementById(\"content\");\nconst dehydratedState = window.App;\n\n\ndebug(\"Rehydrating state...\", dehydratedState);\n\napp.rehydrate(dehydratedState, (err, context) => {\n  if (err) {\n    throw err;\n  }\n\n  debug(\"State has been rehydrated\");\n  const Main = app.getComponent();\n\n  ReactDOM.render(\n    <Main context={ context.getComponentContext() } />,\n    mountNode,\n    () => {\n       debug(\"Root component has been mounted\");\n    }\n  )\n})\n\n\n\n// WEBPACK FOOTER //\n// app/client.js","import Fluxible from 'fluxible';\nimport fetchrPlugin from 'fluxible-plugin-fetchr';\n\nimport registerStores from './config/stores';\nimport Main from './containers/Main.jsx';\n\nconst app = new Fluxible({\n  component: Main\n});\n\napp.plug(fetchrPlugin({\n  xhrPath: '/services',\n  xhrTimeout: 6000,\n}));\n\nregisterStores(app);\n\nexport default app;\n\n\n\n// WEBPACK FOOTER //\n// app/app.js","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// vertx (ignored)\n// module id = 387\n// module chunks = 0","import routeStore from '../stores/route-store';\nimport applicationStore from '../stores/application-store.js'\n\nexport default function registerStores(app) {\n  app.registerStore(routeStore);\n  app.registerStore(applicationStore)\n}\n\n\n\n// WEBPACK FOOTER //\n// app/config/stores.js","import loadHome from '../actions/load-home';\nimport HomeContainer from '../containers/home-container';\n\nexport default {\n  index: {\n    method: 'GET',\n    path: '/',\n    handler: HomeContainer,\n    page: 'home',\n    title: 'Home',\n//    action: loadHome,\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// app/config/routes.js","export default function loadHome() {\n\n}\n\n\n\n// WEBPACK FOOTER //\n// app/actions/load-home.js","import React, { Component } from 'react';\n\nclass HomeContainer extends Component {\n  render () {\n    return (\n      <div id=\"home-container\">\n        <h2>Home</h2>\n        <p>Welcome to the site!</p>\n        <p> Hey awesome site</p>\n        <p> Hey awesomer site</p>\n        <p> uber awesome</p>\n        <p> Extra awesome</p>\n      </div>\n    );\n  }\n}\n\nexport default HomeContainer;\n\n\n\n// WEBPACK FOOTER //\n// app/containers/home-container.js","import BaseStore from 'fluxible/addons/BaseStore';\nimport routeStore from './route-store';\n\nconst GLOBAL_ERROR = 'applicationStore/globalError';\n\nclass ApplicationStore extends BaseStore {\n  static get storeName() {\n    return 'ApplicationStore';\n  }\n\n  static get handlers() {\n    return {\n      NAVIGATE_SUCCESS: 'handleNavigateSuccess',\n      NAVIGATE_FAILURE: 'handleNavigateFailure',\n      [GLOBAL_ERROR]: 'setGlobalError',\n    };\n  }\n\n  constructor(dispatcher) {\n    super(dispatcher);\n    this.pageTitle = '';\n    this.error = null;\n  }\n\n  handleNavigateSuccess(currentRoute) {\n    this.error = null;\n    this.dispatcher.waitFor(routeStore, () => {\n      if (currentRoute && currentRoute.title) {\n        this.pageTitle = currentRoute.title;\n        this.emitChange();\n      }\n    });\n    this.emitChange();\n  }\n\n  handleNavigateFailure(err) {\n    this.error = err;\n    this.emitChange();\n  }\n\n  getGlobalError() {\n    return this.error;\n  }\n\n  getPageTitle() {\n    return this.pageTitle;\n  }\n\n  dehydrate() {\n    return {\n      errorMessage: this.error && this.error.message,\n      errorCode: this.error && this.error.statusCode,\n      errorStack: this.error && this.error.stack,\n      pageTitle: this.pageTitle,\n    };\n  }\n\n  rehydrate(state) {\n    const message = state.errorMessage;\n    if (message) {\n      this.error = new Error(message);\n      this.error.statusCode = state.errorCode;\n      this.error.stack = state.errorStack;\n    } else {\n      this.error = null;\n    }\n    this.pageTitle = state.pageTitle;\n  }\n\n  }\n\nexport default ApplicationStore;\n\n\n\n// WEBPACK FOOTER //\n// app/stores/application-store.js","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { handleHistory } from 'fluxible-router';\nimport { provideContext, connectToStores } from \"fluxible-addons-react\";\n\nimport Nav from '../components/Nav';\n\n// Wrap Root with the fluxible context.\n@provideContext\n\n// Wrap with fluxible-router's history handler (required for routing)\n// This also passes `currentRoute` as prop to the component\n@handleHistory\n@connectToStores(['ApplicationStore'], context => ({\n  error: context.getStore('ApplicationStore').getGlobalError(),\n  pageTitle: context.getStore('ApplicationStore').getPageTitle(),\n}))\n\nexport default class Main extends Component {\n  static get propTypes() {\n    return {\n      isNavigateComplete: PropTypes.bool,\n      currentRoute: PropTypes.object,\n      currentNavigateError: PropTypes.shape({\n        statusCode: PropTypes.number.isRequired,\n        message: PropTypes.string.isRequired\n      }),\n      error: PropTypes.object,\n      pageTitle: PropTypes.string,\n    }\n  }\n\n  render() {\n    const { currentRoute, currentNavigateError, isNavigateComplete } = this.props;\n    const Handler = currentRoute && currentRoute.handler;\n    let content;\n\n    if (currentNavigateError && currentNavigateError.statusCode === 404) {\n      // This \"not found\" error comes from a page init actions\n      // content = <NotFoundPage />;\n      content = null;\n    }  else if (currentNavigateError) {\n      // Generic error, usually always with statusCode 500\n      // content = <ErrorPage err={ currentNavigateError } />;\n        content = null;\n    } else if (!Handler) {\n      // No handler: this is another case where a route is not found (e.g.\n      // is not defined in the routes.js config)\n      // content = <NotFoundPage />;\n      content = null;\n    } else if (!isNavigateComplete) {\n      // Render a loading page while waiting the route's action to finish\n      // content = <LoadingPage />;\n      content = null;\n    } else {\n      // Render the Handler (aka the page) for the current route. The route params\n      // (e.g. values from the URLs) are props being sent to the page component,\n      // for example the `id` of a photo for the `PhotoPage` component.\n      const params = currentRoute.params;\n      content = <Handler {...params} />;\n    }\n\n    return (\n      <div>\n        <Helmet title={this.props.pageTitle} />\n        <Nav currentRoute={currentRoute} />\n        {content}\n      </div>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// app/containers/Main.jsx","import React from 'react';\nimport { NavLink } from 'fluxible-router';\n\nclass Nav extends React.Component {\n  render() {\n    const selected = this.props.currentRoute;\n    const links = this.props.links;\n\n    const linkHTML = Object.keys(links).map((name) => {\n      var className = '';\n      var link = links[name];\n\n      if (selected && selected.name === name) {\n        className = 'pure-menu-selected';\n      }\n\n      return (\n        <li className={className} key={link.path}>\n          <NavLink routeName={link.page} activeStyle={{ backgroundColor: '#eee' }}>{link.title}</NavLink>\n        </li>\n      );\n    });\n\n    return (\n      <ul className=\"pure-menu pure-menu-open pure-menu-horizontal\">\n        {linkHTML}\n      </ul>\n    );\n  }\n}\n\nNav.defaultProps = {\n  selected: null,\n  links: {}\n};\n\nexport default Nav;\n\n\n\n// WEBPACK FOOTER //\n// app/components/Nav.js"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAAA;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;;;;;;;;;;;;;;AC7BA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;;;;;;;ACjBA;;;;;;;;;;;;;ACGA;AACA;AAJA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;;;;;;;;;;;;;ACHA;AAAA;;;;;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AASA;;;;;;AAGA;;;;;;;;;;;;;;;;ACjBA;AACA;;;AAAA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;;;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAKA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;;;;;;;;;;;;;;;;;;;ACvEA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAWA;AALA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;;;AAlDA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AARA;AAUA;;;;;AAZA;;;;;;;;;;;;;;;;ACnBA;AACA;;;AAAA;AACA;;;;;;;;;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AAzBA;AACA;AA2BA;AACA;AACA;AAFA;AACA;AAIA;;;;A","sourceRoot":""}